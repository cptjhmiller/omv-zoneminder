Last-Update: 2015-03-30
Forwarded: https://github.com/ZoneMinder/ZoneMinder/pull/759
Author: Dmitry Smirnov <onlyjob@member.fsf.org>
Description: fixing POD errors
 manpage-has-errors-from-pod2man (forgotten '=back' before '=head2')

--- a/scripts/ZoneMinder/lib/ZoneMinder/ConfigAdmin.pm
+++ b/scripts/ZoneMinder/lib/ZoneMinder/ConfigAdmin.pm
@@ -194,8 +194,10 @@
 =item saveConfigToDB ();
 
 Saves configuration held in memory to the database. The act of loading and saving configuration is a convenient way to ensure that the configuration held in the database corresponds with the most recent definitions and that all components are using the same set of configuration.
 
+=back
+
 =head2 EXPORT
 
 None by default.
 The :data tag will export the various configuration data structures
--- a/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in
+++ b/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in
@@ -1987,8 +1987,10 @@
 =item saveConfigToDB ();
 
 Saves configuration held in memory to the database. The act of loading and saving configuration is a convenient way to ensure that the configuration held in the database corresponds with the most recent definitions and that all components are using the same set of configuration.
 
+=back
+
 =head2 EXPORT
 
 None by default.
 The :data tag will export the various configuration data structures
--- a/scripts/ZoneMinder/lib/ZoneMinder/Logger.pm
+++ b/scripts/ZoneMinder/lib/ZoneMinder/Logger.pm
@@ -826,8 +826,10 @@
 =item Panic( $string );
 
 This method will output a panic error message and then die with a stack trace if the current debug level permits it, otherwise does nothing. This message will be tagged with the PNC string in the logs.
 
+=back
+
 =head2 EXPORT
 
 None by default.
 The :constants tag will export the debug constants which define the various levels of debug
--- a/scripts/ZoneMinder/lib/ZoneMinder/Memory.pm.in
+++ b/scripts/ZoneMinder/lib/ZoneMinder/Memory.pm.in
@@ -732,12 +732,12 @@
 The core elements of ZoneMinder used mapped memory to allow multiple access to resources. Although ZoneMinder scripts have used this information before, up until now it was difficult to access and prone to errors. This module introduces a common API for mapped memory access (both reading and writing) making it a lot easier to customise scripts or even create your own.
 
 All the methods listed below require a 'monitor' parameter. This must be a reference to a hash with at least the 'Id' field set to the monitor id of the mapped memory you wish to access. Using database methods to select the monitor details will also return this kind of data. Some of the mapped memory methods will add and amend new fields to this hash.
 
-=over 4
-
 =head1 METHODS
 
+=over 4
+
 =item zmMemVerify ( $monitor );
 
 Verify that the mapped memory of the monitor given exists and is valid. It will return an undefined value if it is not valid. You should generally call this method first before using any of the other methods, but most of the remaining methods will also do so if the memory has not already been verified.
 
@@ -808,8 +808,10 @@
 =item zmTriggerShowtext ( $monitor, $showtest );
 
 Indicate that the given text should be displayed in the timestamp annotation on any images captured, if the format of the annotation string defined for the monitor permits.
 
+=back
+
 =head1 DATA
 
 The data fields in mapped memory that may be accessed are as follows. There are two main sections, shared_data which is general data and trigger_data which is used for event triggering. Whilst reading from these fields is harmless, extreme care must be taken when writing to mapped memory, especially in the shared_data section as this is normally written to only by monitor capture and analysis processes.
 
@@ -843,20 +845,24 @@
 =head1 CONSTANTS
 
 The following constants are used by the methods above, but can also be used by user scripts if required.
 
+=over 4
+
 =item STATE_IDLE STATE_PREALARM STATE_ALARM STATE_ALERT STATE_TAPE
 
 These constants define the state of the monitor with respect to alarms and events. They are used in the shared_data:state field.
 
 =item ACTION_GET ACTION_SET ACTION_RELOAD ACTION_SUSPEND ACTION_RESUME
 
 These constants defines the various values that can exist in the shared_data:action field. This is a bitmask which when non-zero defines an action that an executing monitor process should take. ACTION_GET requires that the current values of brightness, contrast, colour and hue are taken from the camera and written to the equivalent mapped memory fields. ACTION_SET implies the reverse, that the values in mapped memory should be written to the camera. ACTION_RELOAD signal that the monitor process should reload itself from the database in case any settings have changed there. ACTION_SUSPEND signals that a monitor should stop exaiming images for motion, though other alarms may still occur. ACTION_RESUME sigansl that a monitor should resume motion detectiom.
 
-=item TRIGGER_CANCEL TRIGGER_ON TRIGGER_OFF 
+=item TRIGGER_CANCEL TRIGGER_ON TRIGGER_OFF
 
 These constants are used in the definition of external triggers. TRIGGER_CANCEL is used to indicated that any previous trigger settings should be cancelled, TRIGGER_ON signals that an alarm should be created (or continued)) as a result of the current trigger and TRIGGER_OFF signals that the trigger should prevent any alarms from being generated. See the trigger methods above for further details.
 
+=back
+
 =head1 EXPORT
 
 None by default.
 The :constants tag will export the mapped memory constants which mostly define enumerations for the variables held in memory
